// Code generated by mockery v2.8.0. DO NOT EDIT.

package sshkey

import (
	"io/fs"

	"github.com/bitrise-steplib/steps-activate-ssh-key/command"
	"github.com/stretchr/testify/mock"
)

// MockFactory is an autogenerated mock type for the Factory type
type MockFactory struct {
	mock.Mock
}

// Create provides a mock function with given fields: name, args, opts
func (_m *MockFactory) Create(name string, args []string, opts *command.Opts) command.Command {
	ret := _m.Called(name, args, opts)

	var r0 command.Command
	if rf, ok := ret.Get(0).(func(string, []string, *command.Opts) command.Command); ok {
		r0 = rf(name, args, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(command.Command)
		}
	}

	return r0
}

// MockCommand is an autogenerated mock type for the Command type
type MockCommand struct {
	mock.Mock
}

// PrintableCommandArgs provides a mock function with given fields:
func (_m *MockCommand) PrintableCommandArgs() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Run provides a mock function with given fields:
func (_m *MockCommand) Run() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RunAndReturnExitCode provides a mock function with given fields:
func (_m *MockCommand) RunAndReturnExitCode() (int, error) {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunAndReturnTrimmedOutput provides a mock function with given fields:
func (_m *MockCommand) RunAndReturnTrimmedOutput() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFileWriter is an autogenerated mock type for the FileWriter type
type MockFileWriter struct {
	mock.Mock
}

// Write provides a mock function with given fields: path, value, mode
func (_m *MockFileWriter) Write(path string, value string, mode fs.FileMode) error {
	ret := _m.Called(path, value, mode)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, fs.FileMode) error); ok {
		r0 = rf(path, value, mode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTempDirProvider is an autogenerated mock type for the TempDirProvider type
type MockTempDirProvider struct {
	mock.Mock
}

// CreateTempDir provides a mock function with given fields: prefix
func (_m *MockTempDirProvider) CreateTempDir(prefix string) (string, error) {
	ret := _m.Called(prefix)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(prefix)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(prefix)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
